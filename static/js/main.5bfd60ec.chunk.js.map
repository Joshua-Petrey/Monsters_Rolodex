{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchText","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,G,YAAO,SAACC,GAAD,OACnB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,aCHNC,G,MAAW,SAAAR,GACtB,OAAO,qBAAKC,UAAU,YAAf,SACND,EAAMS,SAASC,KAAI,SAACP,GAAD,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJTO,G,MAAY,SAAC,GAAqC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,aACzC,OAAQ,uBAAOC,KAAK,SACnBb,UAAU,SACVW,YAAeA,EAChBG,SAAWF,MCuCGG,E,kDAzCb,aAAe,IAAD,8BACZ,gBAgBFH,aAAe,SAAAI,GAAO,EAAKC,SAAS,CAACC,WAAYF,EAAEG,OAAOC,SAdxD,EAAKC,MAAQ,CACXb,SAAU,GACVU,WAAY,IALF,E,gEAWM,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAMhC,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,WAEZU,EAAmBpB,EAASqB,QAAQ,SAAA3B,GAAO,OAAIA,EAAQG,KAAKyB,cAAcC,SAASb,EAAWY,kBAEpG,OACE,sBAAK9B,UAAU,MAAf,UAEE,kDAEA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAee,KAAKf,eAE7D,cAAC,EAAD,CAAUJ,SAAUoB,W,GAjCVI,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5bfd60ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n// \r\nexport const Card = (props) => (\r\n\t<div className='card-container'>\r\n\t<img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n\t<h2>{props.monster.name}</h2>\r\n\t<p>{props.monster.email}</p>\r\n\t</div>\r\n);\r\n// grab random monster pic with specified size\r\n// {props.monster.id} uses the id to as a url parameter to get unique pics\r\n//","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => {\r\n\t\treturn <div className=\"card-list\">\r\n\t\t{props.monsters.map((monster) => (\r\n\t\t\t<Card key={monster.id} monster={monster}> \r\n\t\t\t\r\n\t\t\t</Card>\r\n\t\t  ))}\r\n\t\t</div>\r\n\t};// the div will be the parent of whatever elements are inside CardList","import React from 'react' ;\r\nimport './search-box.styles.css' ;\r\n\r\nexport const SearchBox = ( { placeholder, handleChange } ) => {\r\n\treturn  <input type=\"search\"\r\n\t className=\"search\" \r\n\t placeholder= { placeholder }\r\n\tonChange={ handleChange } /> \r\n\r\n};","import { Component } from \"react\";\nimport \"./App.css\";\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component' ;\nclass App extends Component {\n  constructor() {\n    super();\n    //state object\n    this.state = {\n      monsters: [],\n      searchText: \"\"\n    };\n    // our custom methods don't bind its this to the component, so we must do it manually.\n    // this.handleChange = this.handleChange.bind(this) ;\n  }\n  //Set monsters names dynamically after the first render\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n  // our custom class method. Since it's an arrow function it's this is set to the component\n  handleChange = e => { this.setState({searchText: e.target.value}) } \n\n\n  render() {\n    const { monsters, searchText } = this.state ;\n    // filter monsters based on if searchText includes part of their name \n    const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(searchText.toLowerCase()) ) ;\n\n    return (\n      <div className=\"App\">\n\n        <h1>Monsters Rolodex</h1>\n\n        <SearchBox placeholder=\"Search monsters\" handleChange={ this.handleChange}/>\n        \n        <CardList monsters={filteredMonsters}>\n        \n        </CardList>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}